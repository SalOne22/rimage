name: Deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019, macos-latest]
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm ninja-build meson cmake pkg-config libbrotli-dev

      - name: Set up dependencies (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install nasm ninja meson cmake pkg-config brotli

      - name: Set up dependencies (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          choco install nasm ninja cmake
          pip install meson

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.1

      - name: Build rimage
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Strip binary
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            strip target/${{ matrix.target }}/release/rimage
          fi

      - name: Get the version
        id: tagName
        run: |
          VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          echo "::set-output name=tag::$VERSION"

      - name: Build package
        id: package
        run: |
          ARCHIVE_TARGET=${{ matrix.target }}
          ARCHIVE_NAME="rimage-${{ steps.tagName.outputs.tag }}-$ARCHIVE_TARGET"
          ARCHIVE_FILE="${ARCHIVE_NAME}.tar.gz"
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            mkdir "/tmp/${ARCHIVE_NAME}"
            cp README.md CHANGELOG.md LICENSE-MIT LICENSE-APACHE target/${{ matrix.target }}/release/rimage "/tmp/${ARCHIVE_NAME}"
            tar -czf ${ARCHIVE_FILE} -C /tmp/ ${ARCHIVE_NAME}
            echo ::set-output "name=file::${ARCHIVE_FILE}"
            echo ::set-output "name=name::${ARCHIVE_NAME}.tar.gz"
          else
            mv LICENSE-MIT LICENSE-MIT.txt
            mv LICENSE-APACHE LICENSE-APACHE.txt
            7z a ${ARCHIVE_FILE} "./target/${ARCHIVE_TARGET}/release/rimage.exe" ./CHANGELOG.md ./LICENSE-MIT.txt ./LICENSE-APACHE.txt ./README.md
            echo ::set-output name=file::${ARCHIVE_FILE}
            echo ::set-output name=name::${ARCHIVE_NAME}.zip
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.name }}
          path: ${{ steps.package.outputs.file }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version and release description
        id: tagName
        run: |
          VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          tail -n +3 CHANGELOG.md | sed -e '/^$/,$d' > CHANGELOG.txt
          echo "::set-output name=tag::$VERSION"

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: ./binaries

      - name: Create a release
        uses: softprops/action-gh-release@v1
