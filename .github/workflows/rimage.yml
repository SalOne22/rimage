name: rimage

on:
  push:
  pull_request:
    types:
      - opened
      - synchronize
  workflow_dispatch:

jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    if: github.ref_type != 'tag' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork)

    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin

        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target-apt-arch: amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            target-apt-arch: amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            target-apt-arch: arm64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            target-apt-arch: arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Ubuntu multiarch
        if: startsWith(matrix.os, 'ubuntu') && matrix.target-apt-arch != 'amd64'
        run: |
          readonly DISTRO_CODENAME=jammy
          sudo dpkg --add-architecture "${{ matrix.target-apt-arch }}"
          sudo sed -i "s/^deb http/deb [arch=$(dpkg-architecture -q DEB_HOST_ARCH)] http/" /etc/apt/sources.list
          sudo sed -i "s/^deb mirror/deb [arch=$(dpkg-architecture -q DEB_HOST_ARCH)] mirror/" /etc/apt/sources.list
          for suite in '' '-updates' '-backports' '-security'; do
            echo "deb [arch=${{ matrix.target-apt-arch }}] http://ports.ubuntu.com/ $DISTRO_CODENAME$suite main universe multiverse" | \
            sudo tee -a /etc/apt/sources.list >/dev/null
          done

      - name: Install musl development files
        if: endsWith(matrix.target, '-musl')
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install musl-tools musl-dev:${{ matrix.target-apt-arch }}

      - name: Install QEMU and AArch64 cross compiler
        if: startsWith(matrix.target, 'aarch64-unknown-linux')
        run: |
          sudo apt-get -yq update
          # libc6 must be present to run executables dynamically linked
          # against glibc for the target architecture
          sudo apt-get -yq install qemu-user gcc-aarch64-linux-gnu libc6:arm64

      - name: Setup cache 💾
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup nasm 🧑‍💻
        uses: ilammy/setup-nasm@v1

      - name: Setup rust toolchain 🦀
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ env.CARGO_BUILD_TARGET }}
          toolchain: stable

      - name: Test 🧪
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

      - name: Build CLI binary
        run: cargo build --release --all-features

      - name: Upload CLI binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: Rimage binary (${{ matrix.target }})
          path: |
            target/${{ env.CARGO_BUILD_TARGET }}/release/rimage
            target/${{ env.CARGO_BUILD_TARGET }}/release/rimage.exe

  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup cache 💾
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup nasm 🧑‍💻
        uses: ilammy/setup-nasm@v1

      - name: Setup rust toolchain 🦀
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Formatting check 🪄
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy check 🔎
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features -- -D warnings
