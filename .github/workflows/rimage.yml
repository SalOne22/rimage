name: rimage

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'

jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin

        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target-apt-arch: amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            target-apt-arch: arm64
          - target: wasm32-unknown-unknown
            os: macos-latest
            target-apt-arch: amd64
          - target: x86_64-pc-windows-gnu
            os: windows-2019
          - target: x86_64-pc-windows-msvc
            os: windows-2019
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Set up Ubuntu multiarch ⚙️
        if: startsWith(matrix.os, 'ubuntu') && matrix.target-apt-arch != 'amd64'
        run: |
          readonly DISTRO_CODENAME=jammy
          sudo dpkg --add-architecture "${{ matrix.target-apt-arch }}"
          sudo sed -i "s/^deb http/deb [arch=$(dpkg-architecture -q DEB_HOST_ARCH)] http/" /etc/apt/sources.list
          sudo sed -i "s/^deb mirror/deb [arch=$(dpkg-architecture -q DEB_HOST_ARCH)] mirror/" /etc/apt/sources.list
          for suite in '' '-updates' '-backports' '-security'; do
            echo "deb [arch=${{ matrix.target-apt-arch }}] http://ports.ubuntu.com/ $DISTRO_CODENAME$suite main universe multiverse" | \
            sudo tee -a /etc/apt/sources.list >/dev/null
          done
          sudo apt-get -yq update
          sudo apt-get -yq install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Setup cache 💾
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies (linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ninja-build nasm meson

      - name: Install dependencies (macos)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja nasm meson

      - name: Install emcc
        if: matrix.target == 'wasm32-unknown-unknown'
        run: brew install emscripten

      - name: Install dependencies (windows)
        if: matrix.os == 'windows-2019'
        run: |
          choco install -y ninja nasm
          pip install meson

      - name: Setup rust toolchain 🦀
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build 🏗️ (windows)
        if: matrix.os == 'windows-2019'
        shell: cmd
        run: |
          call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cargo build --all-features --target ${{ matrix.target }}

      - name: Build 🏗️ (unix)
        if: ${{ matrix.os != 'windows-2019' && matrix.target != 'wasm32-unknown-unknown' }}
        run: |
          cargo build --all-features --target ${{ matrix.target }}

      - name: Test 🧪 (windows)
        if: matrix.os == 'windows-2019'
        shell: cmd
        run: |
          call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cargo test --all-features --target ${{ matrix.target }}

      - name: Test 🧪 (unix)
        if: ${{ matrix.os != 'windows-2019' && matrix.target != 'wasm32-unknown-unknown' && matrix.target != 'aarch64-apple-darwin' && matrix.target != 'aarch64-unknown-linux-gnu' }}
        run: |
          cargo test --all-features --target ${{ matrix.target }}

      - name: Check wasm
        if: matrix.target == 'wasm32-unknown-unknown'
        run: |
          export EMSCRIPTEN_CMAKE_FILE="$(brew --cellar emscripten)/$(brew list --versions emscripten | tr ' ' '\n' | tail -1)/libexec/cmake/Modules/Platform/Emscripten.cmake"
          cargo check --all-features --target ${{ matrix.target }}
        env:
          CC: 'emcc'
          CXX: 'emcc'

      - name: Upload CLI binary as artifact 💾
        uses: actions/upload-artifact@v3
        with:
          name: rimage binary (${{ matrix.target }})
          path: |
            target/${{ env.CARGO_BUILD_TARGET }}/release/rimage
            target/${{ env.CARGO_BUILD_TARGET }}/release/rimage.exe

  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup cache 💾
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup nasm 🧑‍💻
        uses: ilammy/setup-nasm@v1

      - name: Setup meson + ninja 🧑‍💻
        run: pip3 install --user meson ninja

      - name: Setup rust toolchain 🦀
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Formatting check 🪄
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy check 🔎
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features -- -D warnings
